#pokemonAI - Independent project by David J Rendleman of the University of Pittsburgh of Computer Science and Cognitive Psychology for Fall 2010 - Fall 2012. 
#Contact at David.Rendleman+PKAI@gmail.com
#
#Description: trains and runs pokemon teams and evaluation functions, with the hope of creating an optimal team and/or evaluation function
#
#pkai.ini - configuration settings of PokemonAI
#
#

#Verbosity: (default 0)
#	0 = Trainer outputs one line per game and descriptive statistics after every heat
#	1 = Trainer additionally outputs one line per game participant
#	2 = Game outputs descriptive statistics after every match
#	3 = Game outputs information for every move
#	4 = Planner outputs information for terminal search
#	5 = Planner outputs information for all searches (warnings enabled)
#	6 = Verbose information output enabled 
#	7..10 = Very verbose information output enabled
verbose 5

#what do we seed our RNG to? 
srand time


#libraries here:
#
#
#movesInput: (no default)
#	location of the move library
movesInput data/gen4_moves.txt
#naturesInput: (no default)
#	location of the natures library
naturesInput data/gen4_natures.txt
#typesInput: (no default
#	location of the type library
typesInput data/gen4_types.txt
#itemsInput: (no default)
#	location of the items library
itemsInput data/gen4_items.txt
#abilitiesInput: (no default)
#	location of the abilities library
abilitiesInput data/gen4_abilities.txt
#pokemonInput: (no default)
#	location of the pokemon library
pokemonInput data/gen4_pokemon.txt
#movelistInput: (no default)
#	location of pokemon movelist
movelistInput data/gen4_movelist.txt
#pluginInput: (no default)
#	location of the plugin library root directory
pluginInput plugins
#metagameInput: (no default)
#	location of the current metagame statistics table

#combat simulator variables here:
#
#
#engineAccuracy (default 1)
#	How accurate pkCU's random number generator emulation is. Any number less than
#	16 causes pkCU to generate the average of random values for damage, whereas
#	16 causes the actual damage calculation to be used. THIS WILL GREATLY SLOW DOWN
#	SEARCH!
engineAccuracy 2
#gameAccuracy (no default)
#	Very similar to engine accuracy -- but if defined, game will use a more or
#	less accurate pkCU accuracy
gameAccuracy 2

#game player variables here:
#
#
#maxMatches: (default 1)
#	The maximum number of matches to play per game. If a side is guaranteed to win the set,
#	the set is ended early (f.ex: wins 4 out of 7)
maxMatches 100
#maxPlies: (default 50)
#	The maximum number of turns each team may commit before the game will end in a draw.
maxPlies 1000

#minimax algorithm / AB+ / killer heuristic variables here:
#
#
#numThreads: (default 0)
#	the number of threads used per agent. Increasing the number of threads increases the planner's speed.
#	If numThreads is 0, secondsPerMove will not be enforced.
numThreads 4
#maxSearchDepth: (default 2)
#	the maximum depth (equivalent to plies*2) a given agent will search at a specific position. 
#	Depth 1 = 2 ply.
maxSearchDepth 20
#secondsPerMove: (default 6)
#	the maximum number of seconds per move a given agent will use to search at a specific position.
secondsPerMove 40
#tableBins: (default 23)
#	a number that sets the size of the transposition table networks are allowed. 
#	Transposition table size equal to (binsize)*2^(tableBins)
#	If limiting evaluation depth to 2 or 3, setting this to a low number will not
#	impact prediction performance but greatly increase trainer speed.
tableBins 23
#tableBinsSize: (default 2)
#	a number that specifies the size of each transposition table bin. Setting to 1 will not allow replacement. Equal to (binsize)*2^(tableBins)
tableBinSize 2

#genetic algorithm / team builder variables here:
#
#
#minimumWorkTime: (default 120)
#	amount of time in seconds a given heat will spend in the ranking phase before evolution
minimumWorkTime 30
#writeoutInterval: (default 0)
#	the number of heats in between write-outs. Setting to 0 disables writing trainer data to disk
writeOutInterval 48
#maxGenerations: (default 12)
#	maximum number of heats the evolutionary process will perform. Each pokemon "league" will receive an equal portion of generations.
maxGenerations 192

#team builder variables here:
#
#
#crossoverProbability: (default 0.035)
#	probability that two teams will undergo genetic crossover
crossoverProbability 0.035
#mutationProbability: (default 0.55)
#	probability that one team will exhibit a mutation
mutationProbability 0.55
#seedProbability: (default 0.035)
#	probability that a completely new team will be generated
seedProbability 0.035
#teamPopulations: (default 362 141 60 31 15 12)
#	the sizes (in number of teams) of each individual league of pokemon teams. 
#	The first league is for teams of 1 pokemon, second league for teams of 2 pokemon, so on and so fourth.
#	A given league will use the leagues below it to better its own selection process.
#teamPopulations 490 240 194 150 121 106
teamPopulations 0 0 200 150 121 106
#teamPopulations 0 0 0 0 0 106
#enforceSameLeague: (default false)
#	Allows a given pokemon team to be ranked against teams of different leagues. 
#	Provides greater rating accuracy when leagues are small at the cost of 
#	extra time spent selecting a suitable opponent.
enforceSameLeague false
#seedTeams: (default false)
#	All teams seeded via the command-line are automatically added to the evolutionary population.
seedTeams false
#teamDirectory: (no default)
#	the directory pokemonAI will load and save trained teams to
#teamDirectory ../pkData/trainer6

#network builder variables here:
#
#
#networkPopulation: (default 20)
#	The size (in number of networks) of the trainer's network population
#	A larger population allows for greater ranking accuracy 
#	at the cost of memory and time spent during the ranking process.
networkPopulation 5
#seedDumbEvaluator (default false)
#	If set to true, an additional evaluator will be seeded into the population which
#	does not use a neural network but a simple human designed evaluation function.
#	Used as a benchmark for the networks' overall progress, but can cause the networks to design
#	their play around beating the dumb evaluator.
seedDumbEvaluator true
seedRandomEvaluator true
#jitterEpoch (default 1250)
#	Number of games between network jitters. Set to 0 to remove jitter
jitterEpoch 12000
#seedNetworkProbability (default 0.0001)
#	The probabiliy that a completely new network will be seeded into the population
seedNetworkProbability 0
#seedNetworks: (default false)
#	All teams seeded via the command-line are automatically added to the evolutionary population.
seedNetworks true
#networkDirectory: (no default)
#	the directory pokemonAI will load and save trained networks to
networkDirectory ../pkData/networks

#neural network learning variables here:
#
#
#networkLayers: (no default)
#	then number of neurons (including input and output) each hidden layer of generated neural networks will have.
#	Define additional by specifying more numbers, e.g. "96 64 1" or "128 96 64 1".
networkLayers 64 192 64 1
#learningRate (default 0.10)
#	backPropagation learning rate. A higher value increases learning speed but may cause network
#	thrashing. A lower value increases accuracy but may cause the network to not converge.
learningRate 0.05
#learningMomentum (default 0.01)
#	backpropagation momentum - speeds learning rate in areas with smooth errorspace gradients.
#	A higher value may cause the network to overshoot the solution
learningMomentum 0.15
#learningGamma (default 0.6)
#	Controls the rate of decay of temporal reward signals propagated during learning. A higher
#	gamma implies that less of the signal decays over time
learningGamma 1.0
#learningLambda (default 0.7)
#	Controls the amount of the reward signal propagated during learning. A lambda of 1 implies
#	the reward signal is always propagated, whereas a reward signal of 0 implies the reward signal
#	is not propagated past the final node. Should probably be less than Gamma.
learningLambda 0.0
#jitterSize (default 0.25)
#	The upper bound of the random value that may be added or subtracted from each weight during
#	a jitter event.
jitterSize 0.25

#trueSkill variables here:
#
#
trueskill_initialMean 25
trueskill_initialStdDev 8.333
trueskill_dPerformance 4.166
trueskill_drawProbability 0.01
trueskill_dynamicsFactor 0.08333

#the type of game we wish to play:
# 0 - diagnostic-human , human (known) vs human (known)
# 1 - diagnostic-uncertainty , human (known) vs human (unknown)
# 2 - diagnostic , human (known) vs computer (known)
# 3 - normal , human (unknown) vs computer (known)
# 4 - ai battle, computer (known) vs computer (known)
# 5 - benchmark, plays the first team loaded against its self for secondsPerMove seconds, then quits
# 6 - normal (swapped), computer (known) vs human (unknown)
# 10 - do not start a game, but drop directly to console
# 11 - do not start a game, instead attempt to evolve new pokemon teams
# 12 - do not start a game, instead attempt to evolve new evaluation networks
# 13 - do not start a game, instead attempt to evolve both new teams and networks
# 14 - do not start a game, instead rank a provided pokemon team
# 15 - do not start a game, instead rank a provided evaluation network
gameType 4

#networks here:
#
#
#networkInput networks/mc_128_48_16_1.txt
#networkInput networks/tt_16_48_16_1.txt
networkInput ../pkData/networks/NT-x884809104b8c37b4.txt

#teams here: 
#
#
#1 player teams: (soloTeam[A-M].txt)
#teamInput teams/soloTeamA.txt
#teamInput teams/soloTeamB.txt
#teamInput teams/soloTeamC.txt
#teamInput teams/soloTeamD.txt
#teamInput teams/soloTeamE.txt
#teamInput teams/soloTeamF.txt
#teamInput teams/soloTeamG.txt
#teamInput teams/soloTeamH.txt
#teamInput teams/soloTeamI.txt
#teamInput teams/soloTeamJ.txt
#teamInput teams/soloTeamK.txt
#teamInput teams/soloTeamL.txt
#teamInput teams/soloTeamM.txt
#teamInput teams/soloTeamN.txt
#teamInput teams/soloTeamO.txt
#2 player teams: (dualTeam[A-F].txt)
#teamInput teams/dualTeamA.txt
#teamInput teams/dualTeamB.txt
#teamInput teams/dualTeamC.txt
#teamInput teams/dualTeamD.txt
#teamInput teams/dualTeamE.txt
#teamInput teams/dualTeamF.txt
#3 player teams: (triTeam[A-C].txt)
#teamInput teams/triTeamA.txt
#teamInput teams/triTeamB.txt
#teamInput teams/triTeamC.txt
#5 player teams: (quintTeam[A-B].txt)
#teamInput teams/quintTeamB.txt
#teamInput teams/quintTeamA.txt
#6 player teams: (hexTeam[A-D].txt)
teamInput teams/hexTeamA.txt
#teamInput teams/hexTeamC.txt
teamInput teams/hexTeamD.txt
#random teams:
#teamInput ../pkData/trainer2/_6-x6f24265a1eb9a4c8.txt
#teamInput ../pkData/trainer2/_6-xe7cd5d4333293002.txt